{"remainingRequest":"E:\\ADMEC\\Classes\\Angular4+\\my-ecommerce\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!E:\\ADMEC\\Classes\\Angular4+\\my-ecommerce\\node_modules\\@firebase\\polyfill\\node_modules\\whatwg-fetch\\fetch.js","dependencies":[{"path":"E:\\ADMEC\\Classes\\Angular4+\\my-ecommerce\\node_modules\\@firebase\\polyfill\\node_modules\\whatwg-fetch\\fetch.js","mtime":1551542366115},{"path":"E:\\ADMEC\\Classes\\Angular4+\\my-ecommerce\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532716294326},{"path":"E:\\ADMEC\\Classes\\Angular4+\\my-ecommerce\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["(function(self) {\r\n  'use strict';\r\n\r\n  if (self.fetch) {\r\n    return\r\n  }\r\n\r\n  var support = {\r\n    searchParams: 'URLSearchParams' in self,\r\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\r\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\r\n      try {\r\n        new Blob()\r\n        return true\r\n      } catch(e) {\r\n        return false\r\n      }\r\n    })(),\r\n    formData: 'FormData' in self,\r\n    arrayBuffer: 'ArrayBuffer' in self\r\n  }\r\n\r\n  if (support.arrayBuffer) {\r\n    var viewClasses = [\r\n      '[object Int8Array]',\r\n      '[object Uint8Array]',\r\n      '[object Uint8ClampedArray]',\r\n      '[object Int16Array]',\r\n      '[object Uint16Array]',\r\n      '[object Int32Array]',\r\n      '[object Uint32Array]',\r\n      '[object Float32Array]',\r\n      '[object Float64Array]'\r\n    ]\r\n\r\n    var isDataView = function(obj) {\r\n      return obj && DataView.prototype.isPrototypeOf(obj)\r\n    }\r\n\r\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\r\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\r\n    }\r\n  }\r\n\r\n  function normalizeName(name) {\r\n    if (typeof name !== 'string') {\r\n      name = String(name)\r\n    }\r\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\r\n      throw new TypeError('Invalid character in header field name')\r\n    }\r\n    return name.toLowerCase()\r\n  }\r\n\r\n  function normalizeValue(value) {\r\n    if (typeof value !== 'string') {\r\n      value = String(value)\r\n    }\r\n    return value\r\n  }\r\n\r\n  // Build a destructive iterator for the value list\r\n  function iteratorFor(items) {\r\n    var iterator = {\r\n      next: function() {\r\n        var value = items.shift()\r\n        return {done: value === undefined, value: value}\r\n      }\r\n    }\r\n\r\n    if (support.iterable) {\r\n      iterator[Symbol.iterator] = function() {\r\n        return iterator\r\n      }\r\n    }\r\n\r\n    return iterator\r\n  }\r\n\r\n  function Headers(headers) {\r\n    this.map = {}\r\n\r\n    if (headers instanceof Headers) {\r\n      headers.forEach(function(value, name) {\r\n        this.append(name, value)\r\n      }, this)\r\n    } else if (Array.isArray(headers)) {\r\n      headers.forEach(function(header) {\r\n        this.append(header[0], header[1])\r\n      }, this)\r\n    } else if (headers) {\r\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\r\n        this.append(name, headers[name])\r\n      }, this)\r\n    }\r\n  }\r\n\r\n  Headers.prototype.append = function(name, value) {\r\n    name = normalizeName(name)\r\n    value = normalizeValue(value)\r\n    var oldValue = this.map[name]\r\n    this.map[name] = oldValue ? oldValue+','+value : value\r\n  }\r\n\r\n  Headers.prototype['delete'] = function(name) {\r\n    delete this.map[normalizeName(name)]\r\n  }\r\n\r\n  Headers.prototype.get = function(name) {\r\n    name = normalizeName(name)\r\n    return this.has(name) ? this.map[name] : null\r\n  }\r\n\r\n  Headers.prototype.has = function(name) {\r\n    return this.map.hasOwnProperty(normalizeName(name))\r\n  }\r\n\r\n  Headers.prototype.set = function(name, value) {\r\n    this.map[normalizeName(name)] = normalizeValue(value)\r\n  }\r\n\r\n  Headers.prototype.forEach = function(callback, thisArg) {\r\n    for (var name in this.map) {\r\n      if (this.map.hasOwnProperty(name)) {\r\n        callback.call(thisArg, this.map[name], name, this)\r\n      }\r\n    }\r\n  }\r\n\r\n  Headers.prototype.keys = function() {\r\n    var items = []\r\n    this.forEach(function(value, name) { items.push(name) })\r\n    return iteratorFor(items)\r\n  }\r\n\r\n  Headers.prototype.values = function() {\r\n    var items = []\r\n    this.forEach(function(value) { items.push(value) })\r\n    return iteratorFor(items)\r\n  }\r\n\r\n  Headers.prototype.entries = function() {\r\n    var items = []\r\n    this.forEach(function(value, name) { items.push([name, value]) })\r\n    return iteratorFor(items)\r\n  }\r\n\r\n  if (support.iterable) {\r\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\r\n  }\r\n\r\n  function consumed(body) {\r\n    if (body.bodyUsed) {\r\n      return Promise.reject(new TypeError('Already read'))\r\n    }\r\n    body.bodyUsed = true\r\n  }\r\n\r\n  function fileReaderReady(reader) {\r\n    return new Promise(function(resolve, reject) {\r\n      reader.onload = function() {\r\n        resolve(reader.result)\r\n      }\r\n      reader.onerror = function() {\r\n        reject(reader.error)\r\n      }\r\n    })\r\n  }\r\n\r\n  function readBlobAsArrayBuffer(blob) {\r\n    var reader = new FileReader()\r\n    var promise = fileReaderReady(reader)\r\n    reader.readAsArrayBuffer(blob)\r\n    return promise\r\n  }\r\n\r\n  function readBlobAsText(blob) {\r\n    var reader = new FileReader()\r\n    var promise = fileReaderReady(reader)\r\n    reader.readAsText(blob)\r\n    return promise\r\n  }\r\n\r\n  function readArrayBufferAsText(buf) {\r\n    var view = new Uint8Array(buf)\r\n    var chars = new Array(view.length)\r\n\r\n    for (var i = 0; i < view.length; i++) {\r\n      chars[i] = String.fromCharCode(view[i])\r\n    }\r\n    return chars.join('')\r\n  }\r\n\r\n  function bufferClone(buf) {\r\n    if (buf.slice) {\r\n      return buf.slice(0)\r\n    } else {\r\n      var view = new Uint8Array(buf.byteLength)\r\n      view.set(new Uint8Array(buf))\r\n      return view.buffer\r\n    }\r\n  }\r\n\r\n  function Body() {\r\n    this.bodyUsed = false\r\n\r\n    this._initBody = function(body) {\r\n      this._bodyInit = body\r\n      if (!body) {\r\n        this._bodyText = ''\r\n      } else if (typeof body === 'string') {\r\n        this._bodyText = body\r\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\r\n        this._bodyBlob = body\r\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\r\n        this._bodyFormData = body\r\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\r\n        this._bodyText = body.toString()\r\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\r\n        this._bodyArrayBuffer = bufferClone(body.buffer)\r\n        // IE 10-11 can't handle a DataView body.\r\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\r\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\r\n        this._bodyArrayBuffer = bufferClone(body)\r\n      } else {\r\n        throw new Error('unsupported BodyInit type')\r\n      }\r\n\r\n      if (!this.headers.get('content-type')) {\r\n        if (typeof body === 'string') {\r\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\r\n        } else if (this._bodyBlob && this._bodyBlob.type) {\r\n          this.headers.set('content-type', this._bodyBlob.type)\r\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\r\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\r\n        }\r\n      }\r\n    }\r\n\r\n    if (support.blob) {\r\n      this.blob = function() {\r\n        var rejected = consumed(this)\r\n        if (rejected) {\r\n          return rejected\r\n        }\r\n\r\n        if (this._bodyBlob) {\r\n          return Promise.resolve(this._bodyBlob)\r\n        } else if (this._bodyArrayBuffer) {\r\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\r\n        } else if (this._bodyFormData) {\r\n          throw new Error('could not read FormData body as blob')\r\n        } else {\r\n          return Promise.resolve(new Blob([this._bodyText]))\r\n        }\r\n      }\r\n\r\n      this.arrayBuffer = function() {\r\n        if (this._bodyArrayBuffer) {\r\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\r\n        } else {\r\n          return this.blob().then(readBlobAsArrayBuffer)\r\n        }\r\n      }\r\n    }\r\n\r\n    this.text = function() {\r\n      var rejected = consumed(this)\r\n      if (rejected) {\r\n        return rejected\r\n      }\r\n\r\n      if (this._bodyBlob) {\r\n        return readBlobAsText(this._bodyBlob)\r\n      } else if (this._bodyArrayBuffer) {\r\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\r\n      } else if (this._bodyFormData) {\r\n        throw new Error('could not read FormData body as text')\r\n      } else {\r\n        return Promise.resolve(this._bodyText)\r\n      }\r\n    }\r\n\r\n    if (support.formData) {\r\n      this.formData = function() {\r\n        return this.text().then(decode)\r\n      }\r\n    }\r\n\r\n    this.json = function() {\r\n      return this.text().then(JSON.parse)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  // HTTP methods whose capitalization should be normalized\r\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\r\n\r\n  function normalizeMethod(method) {\r\n    var upcased = method.toUpperCase()\r\n    return (methods.indexOf(upcased) > -1) ? upcased : method\r\n  }\r\n\r\n  function Request(input, options) {\r\n    options = options || {}\r\n    var body = options.body\r\n\r\n    if (input instanceof Request) {\r\n      if (input.bodyUsed) {\r\n        throw new TypeError('Already read')\r\n      }\r\n      this.url = input.url\r\n      this.credentials = input.credentials\r\n      if (!options.headers) {\r\n        this.headers = new Headers(input.headers)\r\n      }\r\n      this.method = input.method\r\n      this.mode = input.mode\r\n      if (!body && input._bodyInit != null) {\r\n        body = input._bodyInit\r\n        input.bodyUsed = true\r\n      }\r\n    } else {\r\n      this.url = String(input)\r\n    }\r\n\r\n    this.credentials = options.credentials || this.credentials || 'omit'\r\n    if (options.headers || !this.headers) {\r\n      this.headers = new Headers(options.headers)\r\n    }\r\n    this.method = normalizeMethod(options.method || this.method || 'GET')\r\n    this.mode = options.mode || this.mode || null\r\n    this.referrer = null\r\n\r\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\r\n      throw new TypeError('Body not allowed for GET or HEAD requests')\r\n    }\r\n    this._initBody(body)\r\n  }\r\n\r\n  Request.prototype.clone = function() {\r\n    return new Request(this, { body: this._bodyInit })\r\n  }\r\n\r\n  function decode(body) {\r\n    var form = new FormData()\r\n    body.trim().split('&').forEach(function(bytes) {\r\n      if (bytes) {\r\n        var split = bytes.split('=')\r\n        var name = split.shift().replace(/\\+/g, ' ')\r\n        var value = split.join('=').replace(/\\+/g, ' ')\r\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\r\n      }\r\n    })\r\n    return form\r\n  }\r\n\r\n  function parseHeaders(rawHeaders) {\r\n    var headers = new Headers()\r\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\r\n    // https://tools.ietf.org/html/rfc7230#section-3.2\r\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\r\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\r\n      var parts = line.split(':')\r\n      var key = parts.shift().trim()\r\n      if (key) {\r\n        var value = parts.join(':').trim()\r\n        headers.append(key, value)\r\n      }\r\n    })\r\n    return headers\r\n  }\r\n\r\n  Body.call(Request.prototype)\r\n\r\n  function Response(bodyInit, options) {\r\n    if (!options) {\r\n      options = {}\r\n    }\r\n\r\n    this.type = 'default'\r\n    this.status = options.status === undefined ? 200 : options.status\r\n    this.ok = this.status >= 200 && this.status < 300\r\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\r\n    this.headers = new Headers(options.headers)\r\n    this.url = options.url || ''\r\n    this._initBody(bodyInit)\r\n  }\r\n\r\n  Body.call(Response.prototype)\r\n\r\n  Response.prototype.clone = function() {\r\n    return new Response(this._bodyInit, {\r\n      status: this.status,\r\n      statusText: this.statusText,\r\n      headers: new Headers(this.headers),\r\n      url: this.url\r\n    })\r\n  }\r\n\r\n  Response.error = function() {\r\n    var response = new Response(null, {status: 0, statusText: ''})\r\n    response.type = 'error'\r\n    return response\r\n  }\r\n\r\n  var redirectStatuses = [301, 302, 303, 307, 308]\r\n\r\n  Response.redirect = function(url, status) {\r\n    if (redirectStatuses.indexOf(status) === -1) {\r\n      throw new RangeError('Invalid status code')\r\n    }\r\n\r\n    return new Response(null, {status: status, headers: {location: url}})\r\n  }\r\n\r\n  self.Headers = Headers\r\n  self.Request = Request\r\n  self.Response = Response\r\n\r\n  self.fetch = function(input, init) {\r\n    return new Promise(function(resolve, reject) {\r\n      var request = new Request(input, init)\r\n      var xhr = new XMLHttpRequest()\r\n\r\n      xhr.onload = function() {\r\n        var options = {\r\n          status: xhr.status,\r\n          statusText: xhr.statusText,\r\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\r\n        }\r\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\r\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\r\n        resolve(new Response(body, options))\r\n      }\r\n\r\n      xhr.onerror = function() {\r\n        reject(new TypeError('Network request failed'))\r\n      }\r\n\r\n      xhr.ontimeout = function() {\r\n        reject(new TypeError('Network request failed'))\r\n      }\r\n\r\n      xhr.open(request.method, request.url, true)\r\n\r\n      if (request.credentials === 'include') {\r\n        xhr.withCredentials = true\r\n      } else if (request.credentials === 'omit') {\r\n        xhr.withCredentials = false\r\n      }\r\n\r\n      if ('responseType' in xhr && support.blob) {\r\n        xhr.responseType = 'blob'\r\n      }\r\n\r\n      request.headers.forEach(function(value, name) {\r\n        xhr.setRequestHeader(name, value)\r\n      })\r\n\r\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\r\n    })\r\n  }\r\n  self.fetch.polyfill = true\r\n})(typeof self !== 'undefined' ? self : this);\r\n",null]}